# -*- coding: utf-8 -*-
"""Копия блокнота "Untitled7.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13a9zvcTGw1yoReqpB5HLb9GUd6CtJZ9A
"""

import requests
import pandas as pd
import time
import logging

API_KEY = "de7303c846394ab1bb72f7465b697dd8"
URL = "https://api.rawg.io/api"

inp = "pars_games_unique.csv"
df_original = pd.read_csv(inp)
games_names = df_original["Название"].tolist()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def get_json(url):
    response = requests.get(url)
    logging.info(f"Запрос: {url} | Статус-код: {response.status_code}")
    if response.status_code == 200:
        return response.json()
    else:
        logging.error(f"Ошибка при запросе {url}: статус {response.status_code}")
        return {}

# Получаем список магазинов
stores_url = f"{URL}/stores?key={API_KEY}"
stores_data = get_json(stores_url)
stores_results = stores_data.get("results", [])
store_dict = {store["id"]: store["name"] for store in stores_results}

games_info = []

for name in games_names:
    logging.info(f"Обработка игры: {name}")

    search_url = f"{URL}/games?key={API_KEY}&search={name}"
    search_data = get_json(search_url)
    results = search_data.get("results", [])
    if not results:
        logging.warning(f"Игра '{name}' не найдена!")
        continue

    game = results[0]
    game_id = game["id"]
    logging.info(f"Выбрана игра: {game.get('name')} (ID: {game_id})")

    detail_url = f"{URL}/games/{game_id}?key={API_KEY}"
    detail_data = get_json(detail_url)

    game_info = {
        "ID": game_id,
        "Название": detail_data.get("name", name),
        "Дата выхода": detail_data.get("released"),
        "Рейтинг": detail_data.get("rating"),
        "Playtime": detail_data.get("playtime"),
        "Metacritic": detail_data.get("metacritic"),
        "Оценок": detail_data.get("ratings_count"),
        "Описание": detail_data.get("description_raw", "")[:150],
        "Издатели": ", ".join(pub["name"] for pub in detail_data.get("publishers", [])),
        "Разработчики": ", ".join(dev["name"] for dev in detail_data.get("developers", [])),
        "Возрастной рейтинг (ESRB)": detail_data.get("esrb_rating", {}).get("name") if detail_data.get("esrb_rating") else None,
        "Теги": ", ".join(tag["name"] for tag in detail_data.get("tags", [])),
        "Популярность (added)": detail_data.get("added"),
        "Платформы": ", ".join(p.get("platform", {}).get("name") for p in detail_data.get("platforms", []) if p.get("platform")),
    }

    games_info.append(game_info)
    time.sleep(0.2)


df_api = pd.DataFrame(games_info)
df_api.to_csv("games_api_data.csv", index=False, encoding="utf-8-sig")
logging.info("Данные API сохранены в 'games_api_data.csv'")